# P3IF Project Rules

## Directory Structure
- Core methods are in `p3if_methods/`
- Thin orchestrator examples are in `p3if_examples/`
- Visualization modules are in `p3if_visualization/`
- The unified test suite is in `p3if_tests/`
- Shared utilities are in `utils/`
- Domain data is in `data/`
- Documentation is in `docs/`
- The web portal is in `website/`

## Code Style
- Follow PEP 8 for Python code style
- Use docstrings for all public functions, classes, and methods
- Keep lines under 100 characters
- Use 4 spaces for indentation (no tabs)

## Imports
- Import order: standard library, third-party packages, local modules
- Use absolute imports from the package root
- Example: `from p3if_methods.models import BasePattern`

## Documentation
- All code should have appropriate documentation
- Update docs when making changes to functionality
- Keep documentation in sync with code changes
- Reference docs are in Markdown format

## Script Paths
- All scripts should be invoked from the project root
- Example: `python scripts/run_multidomain_portal.py`
- Do not use relative imports that reach outside of a package

## Version Control
- Use semantic versioning for releases
- Provide descriptive commit messages
- Reference issue numbers when applicable

## Testing
- Write tests for new functionality
- Run tests before submitting changes
- Tests should be independent and deterministic
- Use pytest for testing

## Error Handling
- Use appropriate error handling and provide helpful error messages
- Log errors in a standardized format
- Fail gracefully when possible

## Visualization Standards
- Maintain consistent styling across visualizations
- Follow the color scheme defined in documentation
- Support accessibility requirements
- Include legends and explanatory text 